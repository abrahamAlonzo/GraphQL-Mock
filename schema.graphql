scalar Date

enum Currency {
    DLLS
    MXN
    YEN
}


enum Language {
    ES
    EN
    JAP
}

type Address {
    street: String
    number: String
    PostalCode: Int
    
}

type GeoCoordinates {
    lat: Float
    lng: Float
}

type AppPreferences {
    darkMode: String
    pushNotificationsEnabled: [String]
}

type Post {
    id: ID!
    comment: String
}

type User {
    id: ID!
    activated: Boolean
    creationDate: Date
    username: String
    firstName: String
    lastName: String
    age: Int
    phone: Int
    email: Int
    secondaryEmail: Int
    recoveryEmail: Int
    facebookToken: String
    twitterToken: String
    googlePlusToken: String
    token: String
    address: [Address]
    oauth2Methods: [String]
    foodPreferences: [String]
    totalMoneyExpend: [Int]
    methodsOfPay: [Int]
    numberOfTotalOrders: [Int]
    coordinates: [GeoCoordinates]
    language: Language
    avatar: String
    savedOrders: [Order]
}

type Promotion {
    id: ID
    code: String
}

type Item {
    id: ID
    SKU: String
    name: String
    description: String
    price: Float
    currency: Currency
    category: Category
}

type Menu {
    id: ID!
    items: [Item]
    promotions: [Promotion]
}

type Ingredients {
    id: ID!
    name: String
    description: String
    price: Float
    currency: Currency
}


type Category {
    ingredientComposition: Boolean
}

type Order {
    id: ID!
    category: String
    items: [Item]
    totalPrice: Float
    currency: Currency
}

type Company {
    id: ID!
    companyName: String
    branchOffice: String
    email: String
    recoveryEmail: String
    language: Language
    phone: [String] 
    avatarMobileApp: String
    avatarAdminApp: String
    menu: Menu
}

# the schema allows the following query:
type Query {
    user(id: Int!): User
    company(id: Int!): Company
    order(id: Int!): Order
    menu(id: Int!): Menu
}